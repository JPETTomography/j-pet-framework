diff --git a/framework/DBHandler/DatabaseFunctionsSQL/DatabaseFunctions.sql b/framework/DBHandler/DatabaseFunctionsSQL/DatabaseFunctions.sql
index c823fea..a09b6c5 100644
--- a/framework/DBHandler/DatabaseFunctionsSQL/DatabaseFunctions.sql
+++ b/framework/DBHandler/DatabaseFunctionsSQL/DatabaseFunctions.sql
@@ -886,3 +886,182 @@ END
 $BODY$ LANGUAGE plpgsql STABLE;
 
 SELECT * FROM getTOMBData(1);
+
+
+****************************************************************************************
+
+*********************************FUNCTION to fill TRefs*********************************
+
+************************************Scintillators***************************************
+
+
+CREATE OR REPLACE FUNCTION getPhotoMultipliersForScintillator(IN p_scintillator_id INTEGER)
+RETURNS TABLE
+(
+  SLSCConnection_id INTEGER,
+  Slot_id INTEGER,
+  HVPMConnection_id INTEGER,
+  PhotoMultiplier_id INTEGER
+) AS
+$BODY$
+BEGIN
+  FOR 
+    SLSCConnection_id,
+    Slot_id,
+    HVPMConnection_id,
+    PhotoMultiplier_id
+
+  IN
+
+      SELECT
+	"SLSCConnection".id AS SLSCConnection_id,
+	"Slot".id AS Slot_id,
+	"HVPMConnection".id AS HVPMConnection_id,
+	"PhotoMultiplier".id AS PhotoMultiplier_id
+
+      FROM "SLSCConnection", "Slot", "HVPMConnection", "PhotoMultiplier"
+	WHERE
+	  "PhotoMultiplier".id = "HVPMConnection".photomultiplier_id
+	  AND
+	  "HVPMConnection".slot_id = "Slot".id
+	  AND
+	  "SLSCConnection".slot_id = "Slot".id
+	  AND
+	  "SLSCConnection".scintillator_id = p_scintillator_id
+  LOOP
+    RETURN NEXT;
+  END LOOP;
+END
+$BODY$ LANGUAGE plpgsql STABLE;
+
+SELECT * FROM getPhotoMultipliersForScintillator(1);
+
+
+****************************************************************************************
+
+************************************PhotoMultipliers***************************************
+
+// dobra funkcja
+CREATE OR REPLACE FUNCTION getKonradBoardsForPhotoMultiplier(IN p_photoMultiplier_id INTEGER)
+RETURNS TABLE
+(
+  PMKBConnection_id INTEGER,
+  KonradBoardInput_id INTEGER,
+  KonradBoard_id INTEGER
+) AS
+$BODY$
+BEGIN
+  FOR 
+    PMKBConnection_id,
+	KonradBoardInput_id,
+	KonradBoard_id
+  IN
+	SELECT
+		"PMKBConnection".id AS PMKBConnection_id,
+		"KonradBoardInput".id AS KonradBoardInput_id,
+		"KonradBoard".id AS KonradBoard_id
+
+	FROM "PMKBConnection", "KonradBoardInput", "KonradBoard"
+		WHERE
+		  "KonradBoard".id = "KonradBoardInput".konradboard_id
+		  AND
+		  "KonradBoardInput".id = "PMKBConnection".konradboardinput_id
+		  AND
+		  "PMKBConnection".photomultiplier_id = p_photoMultiplier_id
+  LOOP
+    RETURN NEXT;
+  END LOOP;
+END
+$BODY$ LANGUAGE plpgsql STABLE;
+
+SELECT * FROM getKonradBoardsForPhotoMultiplier(57);
+
+
+*********************************************************************
+
+************************************KonradBoards***************************************
+
+// trzeba poprawic ta funckje
+CREATE OR REPLACE FUNCTION getTRBsForKonradBoard(IN p_konradBoard_id INTEGER)
+RETURNS TABLE
+(
+	KonradBoardOutput_id INTEGER,
+	KBTRBConnection_id INTEGER,
+	TRBInput_id INTEGER,
+	TRB_id INTEGER
+) AS
+$BODY$
+BEGIN
+  FOR 
+	KonradBoardOutput_id,
+	KBTRBConnection_id,
+	TRBInput_id,
+	TRB_id
+  IN
+      SELECT
+		"KonradBoardOutput".id AS KonradBoardOutput_id,
+		"KBTRBConnection".id AS KBTRBConnection_id,
+		"TRBInput".id AS TRBInput_id,
+		"TRB".id AS TRB_id
+
+      FROM "KonradBoardOutput", "KBTRBConnection", "TRBInput", "TRB"
+		WHERE
+		  "TRB".id = "TRBInput".trb_id
+		  AND
+		  "TRBInput".id = "KBTRBConnection".trbinput_id
+		  AND
+		  "KBTRBConnection".konradboardoutput_id = "KonradBoardOutput".id
+		  AND
+		  "KonradBoardOutput".konradboard_id = p_konradBoard_id
+  LOOP
+    RETURN NEXT;
+  END LOOP;
+END
+$BODY$ LANGUAGE plpgsql STABLE;
+
+SELECT * FROM getTRBsForKonradBoard(1);
+
+
+*********************************************************************
+
+************************************TRBs***************************************
+
+// trzeba poprawic ta funckje
+CREATE OR REPLACE FUNCTION getTOMBForTRB(IN p_TRBOutput INTEGER)
+RETURNS TABLE
+(
+	TRBOutput_id INTEGER,
+	TRBTOMBConnection_id INTEGER,
+	TOMBInput_id INTEGER,
+	TOMB_id INTEGER
+) AS
+$BODY$
+BEGIN
+  FOR 
+	TRBOutput_id,
+	TRBTOMBConnection_id,
+	TOMBInput_id,
+	TOMB_id
+  IN
+      SELECT
+		"TRBOutput".id AS TRBOutput_id,
+		"TRBTOMBConnection".id AS TRBTOMBConnection_id,
+		"TOMBInput".id AS TOMBInput_id,
+		"TRBOffsetMappingBoard".id AS TOMB_id
+
+      FROM "TRBOutput", "TRBTOMBConnection", "TOMBInput", "TRBOffsetMappingBoard"
+		WHERE
+		  "TRBOffsetMappingBoard".id = "TOMBInput".trboffsetmappingboard_id
+		  AND
+		  "TOMBInput".id = "TRBTOMBConnection".tombinput_id
+		  AND
+		  "TRBTOMBConnection".trboutput_id = "TRBOutput".id
+		  AND
+		  "TRBOutput".trb_id = p_TRBOutput
+  LOOP
+    RETURN NEXT;
+  END LOOP;
+END
+$BODY$ LANGUAGE plpgsql STABLE;
+
+SELECT * FROM getTOMBForTRB(1);
diff --git a/framework/DBHandler/DatabaseFunctionsSQL/DatabaseFunctions.sql~ b/framework/DBHandler/DatabaseFunctionsSQL/DatabaseFunctions.sql~
index b95b86a..a4d26af 100644
--- a/framework/DBHandler/DatabaseFunctionsSQL/DatabaseFunctions.sql~
+++ b/framework/DBHandler/DatabaseFunctionsSQL/DatabaseFunctions.sql~
@@ -1,6 +1,6 @@
 /* 
   All functions functions which have been added to database.
-  Last update 29.03.2014
+  Last update 01.06.2014
 */
 
 1)
@@ -886,3 +886,177 @@ END
 $BODY$ LANGUAGE plpgsql STABLE;
 
 SELECT * FROM getTOMBData(1);
+
+
+****************************************************************************************
+
+*********************************FUNCTION to fill TRefs*********************************
+
+************************************Scintillators***************************************
+
+
+CREATE OR REPLACE FUNCTION getPhotoMultipliersForScintillator(IN p_scintillator_id INTEGER)
+RETURNS TABLE
+(
+  SLSCConnection_id INTEGER,
+  Slot_id INTEGER,
+  HVPMConnection_id INTEGER,
+  PhotoMultiplier_id INTEGER
+) AS
+$BODY$
+BEGIN
+  FOR 
+    SLSCConnection_id,
+    Slot_id,
+    HVPMConnection_id,
+    PhotoMultiplier_id
+
+  IN
+
+      SELECT
+	"SLSCConnection".id AS SLSCConnection_id,
+	"Slot".id AS Slot_id,
+	"HVPMConnection".id AS HVPMConnection_id,
+	"PhotoMultiplier".id AS PhotoMultiplier_id
+
+      FROM "SLSCConnection", "Slot", "HVPMConnection", "PhotoMultiplier"
+	WHERE
+	  "PhotoMultiplier".id = "HVPMConnection".photomultiplier_id
+	  AND
+	  "HVPMConnection".slot_id = "Slot".id
+	  AND
+	  "SLSCConnection".slot_id = "Slot".id
+	  AND
+	  "SLSCConnection".scintillator_id = p_scintillator_id
+  LOOP
+    RETURN NEXT;
+  END LOOP;
+END
+$BODY$ LANGUAGE plpgsql STABLE;
+
+SELECT * FROM getPhotoMultipliersForScintillator(1);
+
+
+****************************************************************************************
+
+
+// dobra funkcja
+CREATE OR REPLACE FUNCTION getKonradBoardsForPhotoMultiplier(IN p_photoMultiplier_id INTEGER)
+RETURNS TABLE
+(
+  PMKBConnection_id INTEGER,
+  KonradBoardInput_id INTEGER,
+  KonradBoard_id INTEGER
+) AS
+$BODY$
+BEGIN
+  FOR 
+    PMKBConnection_id,
+	KonradBoardInput_id,
+	KonradBoard_id
+  IN
+	SELECT
+		"PMKBConnection".id AS PMKBConnection_id,
+		"KonradBoardInput".id AS KonradBoardInput_id,
+		"KonradBoard".id AS KonradBoard_id
+
+	FROM "PMKBConnection", "KonradBoardInput", "KonradBoard"
+		WHERE
+		  "KonradBoard".id = "KonradBoardInput".konradboard_id
+		  AND
+		  "KonradBoardInput".id = "PMKBConnection".konradboardinput_id
+		  AND
+		  "PMKBConnection".photomultiplier_id = p_photoMultiplier_id
+  LOOP
+    RETURN NEXT;
+  END LOOP;
+END
+$BODY$ LANGUAGE plpgsql STABLE;
+
+SELECT * FROM getKonradBoardsForPhotoMultiplier(57);
+
+
+*********************************************************************
+
+// trzeba poprawic ta funckje
+CREATE OR REPLACE FUNCTION getTRBsForKonradBoard(IN p_konradBoard_id INTEGER)
+RETURNS TABLE
+(
+	KonradBoardOutput_id INTEGER,
+	KBTRBConnection_id INTEGER,
+	TRBInput_id INTEGER,
+	TRB_id INTEGER
+) AS
+$BODY$
+BEGIN
+  FOR 
+	KonradBoardOutput_id,
+	KBTRBConnection_id,
+	TRBInput_id,
+	TRB_id
+  IN
+      SELECT
+		"KonradBoardOutput".id AS KonradBoardOutput_id,
+		"KBTRBConnection".id AS KBTRBConnection_id,
+		"TRBInput".id AS TRBInput_id,
+		"TRB".id AS TRB_id
+
+      FROM "KonradBoardOutput", "KBTRBConnection", "TRBInput", "TRB"
+		WHERE
+		  "TRB".id = "TRBInput".trb_id
+		  AND
+		  "TRBInput".id = "KBTRBConnection".trbinput_id
+		  AND
+		  "KBTRBConnection".konradboardoutput_id = "KonradBoardOutput".id
+		  AND
+		  "KonradBoardOutput".konradboard_id = p_konradBoard_id
+  LOOP
+    RETURN NEXT;
+  END LOOP;
+END
+$BODY$ LANGUAGE plpgsql STABLE;
+
+SELECT * FROM getTRBsForKonradBoard(1);
+
+
+*********************************************************************
+
+// trzeba poprawic ta funckje
+CREATE OR REPLACE FUNCTION getTOMBForTRB(IN TRBOutput INTEGER)
+RETURNS TABLE
+(
+	TRBOutput_id INTEGER,
+	TRBTOMBConnection_id INTEGER,
+	TOMBInput_id INTEGER,
+	TOMB_id INTEGER
+) AS
+$BODY$
+BEGIN
+  FOR 
+	TRBOutput_id,
+	TRBTOMBConnection_id,
+	TOMBInput_id,
+	TOMB_id
+  IN
+      SELECT
+		"TRBOutput".id AS TRBOutput_id,
+		"TRBTOMBConnection".id AS TRBTOMBConnection_id,
+		"TOMBInput".id AS TOMBInput_id,
+		"TRBOffsetMappingBoard".id AS TOMB_id
+
+      FROM "TRBOutput", "TRBTOMBConnection", "TOMBInput", "TRBOffsetMappingBoard"
+		WHERE
+		  "TRBOffsetMappingBoard".id = "TOMBInput".trboffsetmappingboard_id
+		  AND
+		  "TOMBInput".id = "TRBTOMBConnection".tombinput_id
+		  AND
+		  "TRBTOMBConnection".trboutput_id = "TRBOutput".id
+		  AND
+		  "TRBOutput".trb_id = TRBOutput
+  LOOP
+    RETURN NEXT;
+  END LOOP;
+END
+$BODY$ LANGUAGE plpgsql STABLE;
+
+SELECT * FROM getTOMBForTRB(1);
diff --git a/framework/JPetKB/JPetKB.h b/framework/JPetKB/JPetKB.h
index fad0b46..c9fec79 100644
--- a/framework/JPetKB/JPetKB.h
+++ b/framework/JPetKB/JPetKB.h
@@ -6,6 +6,8 @@
 #include <TRef.h>
 #include <vector>
 #include "../JPetUser/JPetUser.h"
+#include "../JPetTRB/JPetTRB.h"
+//#include "../JPetParamManager/JPetParamManager.h"
 
 
 class JPetKB: public TNamed
@@ -68,14 +70,24 @@ public:
 	 const JPetUser &p_user);
   ~JPetKB(void);
   
-  int id() const { return fId; }
-  bool isActive() const { return fIsActive; }
-  std::string status() const { return fStatus; }
-  std::string description() const { return fDescription; }
-  int version() const { return fVersion; }
+  int getId() const { return fId; }
+  bool getIsActive() const { return fIsActive; }
+  std::string getStatus() const { return fStatus; }
+  std::string getDescription() const { return fDescription; }
+  int getVersion() const { return fVersion; }
   JPetUser getUser() const { return fUser; }
   
   std::vector<TRef> getTRefTRBs() const { return fTRefTRBs; }
+  void setTRefTRBs(std::vector<TRef> &p_TRefTRBs)
+  {
+    fTRefTRBs = p_TRefTRBs;
+  }
+  void addTRefTRB(JPetTRB &p_TRB)
+  {
+    fTRefTRBs.push_back(&p_TRB);
+  }
+  
+  friend class JPetParamManager;
   
 protected:
   int fId;
@@ -87,6 +99,11 @@ protected:
 
   std::vector<TRef> fTRefTRBs;
   
+  void clearTRefTRBs()
+  {
+    fTRefTRBs.clear();
+  }
+  
   ClassDef(JPetKB, 1);
 };
 
diff --git a/framework/JPetManager/JPetManager.cpp b/framework/JPetManager/JPetManager.cpp
index 78c1370..83ffa39 100644
--- a/framework/JPetManager/JPetManager.cpp
+++ b/framework/JPetManager/JPetManager.cpp
@@ -71,7 +71,7 @@ void JPetManager::ParseCmdLine(int argc, char** argv){
       std::cout << "fParamManager.getKBsDataSize() = " << fParamManager.getKBsDataSize() << std::endl;
     }
     */
-/*
+
   fCmdParser.parse(argc, (const char **)argv);
   
 std::cout << "JPetManager::ParseCmdLine()" << endl;
@@ -109,7 +109,6 @@ std::cout << "fParamManager.getDataSize() = " << fParamManager.getDataSize(JPetP
 std::cout << "TOMBs" << std::endl;      
 std::cout << "fParamManager.getDataSize() = " << fParamManager.getDataSize(JPetParamManager::kTOMB) << std::endl;
     }
-    */
 }
 
 JPetManager::~JPetManager()
diff --git a/framework/JPetManager/JPetManager.cpp~ b/framework/JPetManager/JPetManager.cpp~
index 2689118..78c1370 100644
--- a/framework/JPetManager/JPetManager.cpp~
+++ b/framework/JPetManager/JPetManager.cpp~
@@ -62,7 +62,7 @@ void JPetManager::ParseCmdLine(int argc, char** argv){
         fUnpacker.setParams(fCmdParser.getFileName().c_str());
       }
     }
-    
+/*    
     if(fCmdParser.isRunNumberSet())
     {
       std::cout << "fParamManager.getDataSize() = " << fParamManager.getDataSize() << std::endl;
@@ -70,6 +70,7 @@ void JPetManager::ParseCmdLine(int argc, char** argv){
       fParamManager.fillKBsData(fCmdParser.getRunNumber());
       std::cout << "fParamManager.getKBsDataSize() = " << fParamManager.getKBsDataSize() << std::endl;
     }
+    */
 /*
   fCmdParser.parse(argc, (const char **)argv);
   
diff --git a/framework/JPetPM/JPetPM.h b/framework/JPetPM/JPetPM.h
index 3c41eb2..b50240a 100644
--- a/framework/JPetPM/JPetPM.h
+++ b/framework/JPetPM/JPetPM.h
@@ -7,11 +7,13 @@
 #include <TRef.h>
 #include <vector>
 #include "../JPetUser/JPetUser.h"
+#include "../JPetKB/JPetKB.h"
+//#include "../JPetParamManager/JPetParamManager.h"
 
 
 class JPetPM: public TNamed
 {
-public:
+protected:
   enum Side {kLeft, kRight};
 
   struct PMModel
@@ -49,7 +51,8 @@ public:
 				     fGainBeta(p_gainBeta)
     {}
   };
-  
+
+public:
   JPetPM(void);
   JPetPM(JPetPM::Side p_side,
 	 int p_id,
@@ -90,6 +93,16 @@ public:
   JPetUser getUser(void) const { return fUser; }
   
   std::vector<TRef> getTRefKBs() const { return fTRefKBs; }
+  void setTRefKBs(std::vector<TRef> &p_TRefKBs)
+  {
+    fTRefKBs = p_TRefKBs;
+  }
+  void addTRefKB(JPetKB &p_KB)
+  {
+    fTRefKBs.push_back(&p_KB);
+  }
+  
+  friend class JPetParamManager;
   
 protected:
   Side fSide;
@@ -108,6 +121,11 @@ protected:
   JPetUser fUser;
   
   std::vector<TRef> fTRefKBs;
+  
+  void clearTRefKBs()
+  {
+    fTRefKBs.clear();
+  }
 
   ClassDef(JPetPM, 1);
 };
diff --git a/framework/JPetPM/JPetPM.h~ b/framework/JPetPM/JPetPM.h~
index 8781f31..793c47d 100644
--- a/framework/JPetPM/JPetPM.h~
+++ b/framework/JPetPM/JPetPM.h~
@@ -4,7 +4,11 @@
 
 #include "TNamed.h"
 #include <utility>
+#include <TRef.h>
+#include <vector>
 #include "../JPetUser/JPetUser.h"
+#include "../JPetKB/JPetKB.h"
+//#include "../JPetParamManager/JPetParamManager.h"
 
 
 class JPetPM: public TNamed
@@ -87,6 +91,18 @@ public:
   PMCalibration getCalibration() const { return fPMCalibration; }
   JPetUser getUser(void) const { return fUser; }
   
+  std::vector<TRef> getTRefKBs() const { return fTRefKBs; }
+  void setTRefKBs(std::vector<TRef> &p_TRefKBs)
+  {
+    fTRefKBs = p_TRefKBs;
+  }
+  void addTRefKB(JPetKB &p_KB)
+  {
+    fTRefKBs.push_back(&p_KB);
+  }
+  
+  friend class JPetParamManager;
+  
 protected:
   Side fSide;
   int fId;
@@ -102,6 +118,13 @@ protected:
   PMModel fPMModel;
   PMCalibration fPMCalibration;
   JPetUser fUser;
+  
+  std::vector<TRef> fTRefKBs;
+  
+  void clearTRefKBs()
+  {
+    fTRefKBs.clear();
+  }
 
   ClassDef(JPetPM, 1);
 };
diff --git a/framework/JPetParamManager/JPetParamManager.cpp b/framework/JPetParamManager/JPetParamManager.cpp
index de61d75..c9ea856 100644
--- a/framework/JPetParamManager/JPetParamManager.cpp
+++ b/framework/JPetParamManager/JPetParamManager.cpp
@@ -695,3 +695,207 @@ int JPetParamManager::getDataSize(const JPetParamManager::ContainerType &p_conta
     assert(1 == 0);	//do przemyslenia
   }
 }
+
+void JPetParamManager::fillScintillatorsTRefs()
+{
+  if(!fScintillators.empty() && !fPMs.empty())
+  {
+    DB::SERVICES::DBHandler &l_dbHandlerInstance = DB::SERVICES::DBHandler::getInstance();
+    
+    for(std::vector<JPetScin>::iterator l_scintillator_it = fScintillators.begin(); l_scintillator_it != fScintillators.end(); ++l_scintillator_it)
+    {
+      l_scintillator_it->clearTRefPMs();
+      
+      std::string l_scitillator_id = boost::lexical_cast<std::string>(l_scintillator_it->getId());
+      
+      std::string l_sqlQuerry = "SELECT * FROM getPhotoMultipliersForScintillator(" + l_scitillator_id + ");";
+      pqxx::result l_runDbResults = l_dbHandlerInstance.querry(l_sqlQuerry);
+
+      size_t l_sizeResultQuerry = l_runDbResults.size();
+      
+      if(l_sizeResultQuerry)
+      {
+	for(pqxx::result::const_iterator row = l_runDbResults.begin(); row != l_runDbResults.end(); ++row)
+	{
+	  int l_SLSCConnection_id = row["SLSCConnection_id"].as<int>();
+	  int l_TOMB_id = row["Slot_id"].as<int>();
+	  int l_HVPMConnection_id = row["HVPMConnection_id"].as<int>();
+	  int l_PhotoMultiplier_id = row["PhotoMultiplier_id"].as<int>();
+	  
+	  for(std::vector<JPetPM>::iterator l_PM_it = fPMs.begin(); l_PM_it != fPMs.end(); ++l_PM_it)
+	  {
+	    int l_PM_id = l_PM_it->getId();
+	    
+	    if(l_PM_id == l_PhotoMultiplier_id)
+	    {
+	      JPetPM::Side l_PM_side = l_PM_it->getSide();
+	      
+	      if(l_PM_side == JPetPM::Side::kLeft)
+	      {
+		l_scintillator_it->setLeftTRefPM(*l_PM_it);
+	      }
+	      else if(l_PM_side == JPetPM::Side::kRight)
+	      {
+		l_scintillator_it->setRightTRefPM(*l_PM_it);
+	      }
+	    }
+	  }
+	}
+      }
+    }
+  }
+}
+
+void JPetParamManager::fillPMsTRefs()
+{
+  if(!fPMs.empty() && !fKBs.empty())
+  {
+    DB::SERVICES::DBHandler &l_dbHandlerInstance = DB::SERVICES::DBHandler::getInstance();
+    
+    for(std::vector<JPetPM>::iterator l_PM_it = fPMs.begin(); l_PM_it != fPMs.end(); ++l_PM_it)
+    {
+      l_PM_it->clearTRefKBs();
+      
+      std::string l_PM_id = boost::lexical_cast<std::string>(l_PM_it->getId());
+      
+      std::string l_sqlQuerry = "SELECT * FROM getKonradBoardsForPhotoMultiplier(" + l_PM_id + ");";
+      pqxx::result l_runDbResults = l_dbHandlerInstance.querry(l_sqlQuerry);
+
+      size_t l_sizeResultQuerry = l_runDbResults.size();
+      
+      if(l_sizeResultQuerry)
+      {
+	for(pqxx::result::const_iterator row = l_runDbResults.begin(); row != l_runDbResults.end(); ++row)
+	{
+	  int l_PMKBConnection_id = row["PMKBConnection_id"].as<int>();
+	  int l_KonradBoardInput_id = row["KonradBoardInput_id"].as<int>();
+	  int l_KonradBoard_id = row["KonradBoard_id"].as<int>();
+	  
+	  for(std::vector<JPetKB>::iterator l_KB_it = fKBs.begin(); l_KB_it != fKBs.end(); ++l_KB_it)
+	  {
+	    int l_KB_id = l_KB_it->getId();
+	    
+	    if(l_KB_id == l_KonradBoard_id)
+	    {
+	      l_PM_it->addTRefKB(*l_KB_it);
+	    }
+	  }
+	}
+      }
+    }
+  }
+}
+
+void JPetParamManager::fillKBsTRefs()
+{
+  if(!fKBs.empty() && !fTRBs.empty())
+  {
+    DB::SERVICES::DBHandler &l_dbHandlerInstance = DB::SERVICES::DBHandler::getInstance();
+    
+    for(std::vector<JPetKB>::iterator l_KB_it = fKBs.begin(); l_KB_it != fKBs.end(); ++l_KB_it)
+    {
+      l_KB_it->clearTRefTRBs();
+      
+      std::string l_KB_id = boost::lexical_cast<std::string>(l_KB_it->getId());
+      
+      std::string l_sqlQuerry = "SELECT * FROM getTRBsForKonradBoard(" + l_KB_id + ");";
+      pqxx::result l_runDbResults = l_dbHandlerInstance.querry(l_sqlQuerry);
+
+      size_t l_sizeResultQuerry = l_runDbResults.size();
+      
+      if(l_sizeResultQuerry)
+      {
+	for(pqxx::result::const_iterator row = l_runDbResults.begin(); row != l_runDbResults.end(); ++row)
+	{
+	  int l_KonradBoardOutput_id = row["KonradBoardOutput_id"].as<int>();
+	  int l_KBTRBConnection_id = row["KBTRBConnection_id"].as<int>();
+	  int l_TRBInput_id = row["TRBInput_id"].as<int>();
+	  int l_TRB_id = row["TRB_id"].as<int>();
+	  
+	  for(std::vector<JPetTRB>::iterator l_TRB_it = fTRBs.begin(); l_TRB_it != fTRBs.end(); ++l_TRB_it)
+	  {
+	    int l_TRBId = l_TRB_it->getId();
+	    
+	    if(l_TRBId == l_TRB_id)
+	    {
+	      l_KB_it->addTRefTRB(*l_TRB_it);
+	    }
+	  }
+	}
+      }
+    }
+  }
+}
+
+void JPetParamManager::fillTRBsTRefs()
+{
+  if(!fTRBs.empty() && !fTOMBs.empty())
+  {
+    DB::SERVICES::DBHandler &l_dbHandlerInstance = DB::SERVICES::DBHandler::getInstance();
+    
+    for(std::vector<JPetTRB>::iterator l_TRB_it = fTRBs.begin(); l_TRB_it != fTRBs.end(); ++l_TRB_it)
+    {
+      l_TRB_it->clearTRefTOMB();
+      
+      std::string l_TRB_id = boost::lexical_cast<std::string>(l_TRB_it->getId());
+      
+      std::string l_sqlQuerry = "SELECT * FROM getTOMBForTRB(" + l_TRB_id + ");";
+      pqxx::result l_runDbResults = l_dbHandlerInstance.querry(l_sqlQuerry);
+
+      size_t l_sizeResultQuerry = l_runDbResults.size();
+      
+      if(l_sizeResultQuerry)
+      {
+	for(pqxx::result::const_iterator row = l_runDbResults.begin(); row != l_runDbResults.end(); ++row)
+	{
+	  int l_TRBOutput_id = row["TRBOutput_id"].as<int>();
+	  int l_TRBTOMBConnection_id = row["TRBTOMBConnection_id"].as<int>();
+	  int l_TOMBInput_id = row["TOMBInput_id"].as<int>();
+	  int l_TOMB_id = row["TOMB_id"].as<int>();
+	  
+	  for(std::vector<JPetTOMB>::iterator l_TOMB_it = fTOMBs.begin(); l_TOMB_it != fTOMBs.end(); ++l_TOMB_it)
+	  {
+	    int l_TOMBId = l_TOMB_it->getId();
+	    
+	    if(l_TOMBId == l_TOMB_id)
+	    {
+	      l_TRB_it->setTRefTOMB(*l_TOMB_it);
+	    }
+	  }
+	}
+      }
+    }
+  }
+}
+
+void JPetParamManager::fillContainersTRefs()
+{
+  fillScintillatorsTRefs();
+}
+
+void JPetParamManager::fillContainersTRefs(const JPetParamManager::ContainerType &p_containerType)
+{
+  switch(p_containerType) 
+  {
+    case kScintillator:
+    {
+      fillScintillatorsTRefs();
+      break;
+    }
+    case kPM:
+    {
+      fillPMsTRefs();
+      break;
+    }
+    case kKB:
+    {
+      fillKBsTRefs();
+      break;
+    }
+    case kTRB:
+    {
+      fillTRBsTRefs();
+      break;
+    }
+  }
+}
diff --git a/framework/JPetParamManager/JPetParamManager.cpp~ b/framework/JPetParamManager/JPetParamManager.cpp~
index 8729cd7..f46caa9 100644
--- a/framework/JPetParamManager/JPetParamManager.cpp~
+++ b/framework/JPetParamManager/JPetParamManager.cpp~
@@ -51,8 +51,8 @@ void JPetParamManager::readFile(const char * file_name){
 		
 		iss >> trb;
 		iss >> scin;
-		fTRBNumbers.push_back(trb);
-		fScinNumbers.push_back(scin);
+		//fTRBNumbers.push_back(trb);
+		//fScinNumbers.push_back(scin);
 	}
 }
 
@@ -695,3 +695,207 @@ int JPetParamManager::getDataSize(const JPetParamManager::ContainerType &p_conta
     assert(1 == 0);	//do przemyslenia
   }
 }
+
+void JPetParamManager::fillScintillatorsTRefs()
+{
+  if(!fScintillators.empty() && !fPMs.empty())
+  {
+    DB::SERVICES::DBHandler &l_dbHandlerInstance = DB::SERVICES::DBHandler::getInstance();
+    
+    for(std::vector<JPetScin>::iterator l_scintillator_it = fScintillators.begin(); l_scintillator_it != fScintillators.end(); ++l_scintillator_it)
+    {
+      l_scintillator_it->clearTRefPMs();
+      
+      std::string l_scitillator_id = boost::lexical_cast<std::string>(l_scintillator_it->getId());
+      
+      std::string l_sqlQuerry = "SELECT * FROM getPhotoMultipliersForScintillator(" + l_scitillator_id + ");";
+      pqxx::result l_runDbResults = l_dbHandlerInstance.querry(l_sqlQuerry);
+
+      size_t l_sizeResultQuerry = l_runDbResults.size();
+      
+      if(l_sizeResultQuerry)
+      {
+	for(pqxx::result::const_iterator row = l_runDbResults.begin(); row != l_runDbResults.end(); ++row)
+	{
+	  int l_SLSCConnection_id = row["SLSCConnection_id"].as<int>();
+	  int l_TOMB_id = row["Slot_id"].as<int>();
+	  int l_HVPMConnection_id = row["HVPMConnection_id"].as<int>();
+	  int l_PhotoMultiplier_id = row["PhotoMultiplier_id"].as<int>();
+	  
+	  for(std::vector<JPetPM>::iterator l_PM_it = fPMs.begin(); l_PM_it != fPMs.end(); ++l_PM_it)
+	  {
+	    int l_PM_id = l_PM_it->getId();
+	    
+	    if(l_PM_id == l_PhotoMultiplier_id)
+	    {
+	      JPetPM::Side l_PM_side = l_PM_it->getSide();
+	      
+	      if(l_PM_side == JPetPM::Side::kLeft)
+	      {
+		l_scintillator_it->setLeftTRefPM(*l_PM_it);
+	      }
+	      else if(l_PM_side == JPetPM::Side::kRight)
+	      {
+		l_scintillator_it->setRightTRefPM(*l_PM_it);
+	      }
+	    }
+	  }
+	}
+      }
+    }
+  }
+}
+
+void JPetParamManager::fillPMsTRefs()
+{
+  if(!fPMs.empty() && !fKBs.empty())
+  {
+    DB::SERVICES::DBHandler &l_dbHandlerInstance = DB::SERVICES::DBHandler::getInstance();
+    
+    for(std::vector<JPetPM>::iterator l_PM_it = fPMs.begin(); l_PM_it != fPMs.end(); ++l_PM_it)
+    {
+      l_PM_it->clearTRefKBs();
+      
+      std::string l_PM_id = boost::lexical_cast<std::string>(l_PM_it->getId());
+      
+      std::string l_sqlQuerry = "SELECT * FROM getKonradBoardsForPhotoMultiplier(" + l_PM_id + ");";
+      pqxx::result l_runDbResults = l_dbHandlerInstance.querry(l_sqlQuerry);
+
+      size_t l_sizeResultQuerry = l_runDbResults.size();
+      
+      if(l_sizeResultQuerry)
+      {
+	for(pqxx::result::const_iterator row = l_runDbResults.begin(); row != l_runDbResults.end(); ++row)
+	{
+	  int l_PMKBConnection_id = row["PMKBConnection_id"].as<int>();
+	  int l_KonradBoardInput_id = row["KonradBoardInput_id"].as<int>();
+	  int l_KonradBoard_id = row["KonradBoard_id"].as<int>();
+	  
+	  for(std::vector<JPetKB>::iterator l_KB_it = fKBs.begin(); l_KB_it != fKBs.end(); ++l_KB_it)
+	  {
+	    int l_KB_id = l_KB_it->getId();
+	    
+	    if(l_KB_id == l_KonradBoard_id)
+	    {
+	      l_PM_it->addTRefKB(*l_KB_it);
+	    }
+	  }
+	}
+      }
+    }
+  }
+}
+
+void JPetParamManager::fillKBsTRefs()
+{
+  if(!fKBs.empty() && !fTRBs.empty())
+  {
+    DB::SERVICES::DBHandler &l_dbHandlerInstance = DB::SERVICES::DBHandler::getInstance();
+    
+    for(std::vector<JPetKB>::iterator l_KB_it = fKBs.begin(); l_KB_it != fKBs.end(); ++l_KB_it)
+    {
+      l_KB_it->clearTRefTRBs();
+      
+      std::string l_KB_id = boost::lexical_cast<std::string>(l_KB_it->getId());
+      
+      std::string l_sqlQuerry = "SELECT * FROM getTRBsForKonradBoard(" + l_KB_id + ");";
+      pqxx::result l_runDbResults = l_dbHandlerInstance.querry(l_sqlQuerry);
+
+      size_t l_sizeResultQuerry = l_runDbResults.size();
+      
+      if(l_sizeResultQuerry)
+      {
+	for(pqxx::result::const_iterator row = l_runDbResults.begin(); row != l_runDbResults.end(); ++row)
+	{
+	  int l_KonradBoardOutput_id = row["KonradBoardOutput_id"].as<int>();
+	  int l_KBTRBConnection_id = row["KBTRBConnection_id"].as<int>();
+	  int l_TRBInput_id = row["TRBInput_id"].as<int>();
+	  int l_TRB_id = row["TRB_id"].as<int>();
+	  
+	  for(std::vector<JPetTRB>::iterator l_TRB_it = fTRBs.begin(); l_TRB_it != fTRBs.end(); ++l_TRB_it)
+	  {
+	    int l_TRBId = l_TRB_it->getId();
+	    
+	    if(l_TRBId == l_TRB_id)
+	    {
+	      l_KB_it->addTRefTRB(*l_TRB_it);
+	    }
+	  }
+	}
+      }
+    }
+  }
+}
+
+void JPetParamManager::fillTRBsTRefs()
+{
+  if(!fTRBs.empty() && !fTOMBs.empty())
+  {
+    DB::SERVICES::DBHandler &l_dbHandlerInstance = DB::SERVICES::DBHandler::getInstance();
+    
+    for(std::vector<JPetTRB>::iterator l_TRB_it = fTRBs.begin(); l_TRB_it != fTRBs.end(); ++l_TRB_it)
+    {
+      l_TRB_it->clearTRefTOMB();
+      
+      std::string l_TRB_id = boost::lexical_cast<std::string>(l_TRB_it->getId());
+      
+      std::string l_sqlQuerry = "SELECT * FROM getTOMBForTRB(" + l_TRB_id + ");";
+      pqxx::result l_runDbResults = l_dbHandlerInstance.querry(l_sqlQuerry);
+
+      size_t l_sizeResultQuerry = l_runDbResults.size();
+      
+      if(l_sizeResultQuerry)
+      {
+	for(pqxx::result::const_iterator row = l_runDbResults.begin(); row != l_runDbResults.end(); ++row)
+	{
+	  int l_TRBOutput_id = row["TRBOutput_id"].as<int>();
+	  int l_TRBTOMBConnection_id = row["TRBTOMBConnection_id"].as<int>();
+	  int l_TOMBInput_id = row["TOMBInput_id"].as<int>();
+	  int l_TOMB_id = row["TOMB_id"].as<int>();
+	  
+	  for(std::vector<JPetTOMB>::iterator l_TOMB_it = fTOMBs.begin(); l_TOMB_it != fTOMBs.end(); ++l_TOMB_it)
+	  {
+	    int l_TOMBId = l_TOMB_it->getId();
+	    
+	    if(l_TOMBId == l_TOMB_id)
+	    {
+	      l_TRB_it->addTRefTRB(*l_TOMB_it);
+	    }
+	  }
+	}
+      }
+    }
+  }
+}
+
+void JPetParamManager::fillContainersTRefs()
+{
+  fillScintillatorsTRefs();
+}
+
+void JPetParamManager::fillContainersTRefs(const JPetParamManager::ContainerType &p_containerType)
+{
+  switch(p_containerType) 
+  {
+    case kScintillator:
+    {
+      fillScintillatorsTRefs();
+      break;
+    }
+    case kPM:
+    {
+      fillPMsTRefs();
+      break;
+    }
+    case kKB:
+    {
+      fillKBsTRefs();
+      break;
+    }
+    case kTRB:
+    {
+      fillTRBsTRefs();
+      break;
+    }
+  }
+}
diff --git a/framework/JPetParamManager/JPetParamManager.h b/framework/JPetParamManager/JPetParamManager.h
index 7e05724..a26c1a2 100644
--- a/framework/JPetParamManager/JPetParamManager.h
+++ b/framework/JPetParamManager/JPetParamManager.h
@@ -54,6 +54,14 @@ public:
   void fillContainers(const int p_run_id);
   void fillContainers(const JPetParamManager::ContainerType &p_containerType, const char *p_fileName);
   
+  void fillScintillatorsTRefs(void);
+  void fillPMsTRefs(void);
+  void fillKBsTRefs(void);
+  void fillTRBsTRefs(void);
+  
+  void fillContainersTRefs(void);
+  void fillContainersTRefs(const JPetParamManager::ContainerType &p_containerType);
+  
   void generateRootFile(const JPetParamManager::ContainerType &p_containerType, const char *p_fileName);
   
   template <typename T>
@@ -63,6 +71,11 @@ public:
   
   int getDataSize(const JPetParamManager::ContainerType &p_containerType) const;
   
+  // friend void JPetScin::clearTRefPMs();
+  // friend void JPetPM::clearTRefKBs();
+  // friend void JPetKB::clearTRefTRBs();
+  // friend void JPetTRB::clearTRefTOMB();
+  
 protected:  
   void fillScintillators(const char *p_fileName);
   void fillPMs(const char *p_fileName);
diff --git a/framework/JPetParamManager/JPetParamManager.h~ b/framework/JPetParamManager/JPetParamManager.h~
index 02522e9..242b724 100644
--- a/framework/JPetParamManager/JPetParamManager.h~
+++ b/framework/JPetParamManager/JPetParamManager.h~
@@ -43,6 +43,8 @@ public:
 		   const std::string &p_TOMBsObjectName);
   ~JPetParamManager(void);
   
+  void readFile(const char* file_name);
+  
   void fillScintillators(const int p_run_id);
   void fillPMs(const int p_run_id);
   void fillKBs(const int p_run_id);
@@ -52,6 +54,14 @@ public:
   void fillContainers(const int p_run_id);
   void fillContainers(const JPetParamManager::ContainerType &p_containerType, const char *p_fileName);
   
+  void fillScintillatorsTRefs(void);
+  void fillPMsTRefs(void);
+  void fillKBsTRefs(void);
+  void fillTRBsTRefs(void);
+  
+  void fillContainersTRefs(void);
+  void fillContainersTRefs(const JPetParamManager::ContainerType &p_containerType);
+  
   void generateRootFile(const JPetParamManager::ContainerType &p_containerType, const char *p_fileName);
   
   template <typename T>
@@ -61,6 +71,9 @@ public:
   
   int getDataSize(const JPetParamManager::ContainerType &p_containerType) const;
   
+  // friend void JPetScin::clearTRefPMs();
+  // friend void JPetPM::clearTRefKBs();
+  
 protected:  
   void fillScintillators(const char *p_fileName);
   void fillPMs(const char *p_fileName);
diff --git a/framework/JPetScin/JPetScin.h b/framework/JPetScin/JPetScin.h
index 9ac2071..ab254b1 100644
--- a/framework/JPetScin/JPetScin.h
+++ b/framework/JPetScin/JPetScin.h
@@ -5,11 +5,13 @@
 #include "TNamed.h"
 #include <TRef.h>
 #include "../JPetUser/JPetUser.h"
+#include "../JPetPM/JPetPM.h"
+//#include "../JPetParamManager/JPetParamManager.h"
 
 
 class JPetScin: public TNamed
 {
-public:
+protected:
   enum Dimension {kLength, kHeight, kWidth};
   
   struct ScinDimensions
@@ -42,6 +44,7 @@ public:
     {}
   };
 
+public:
   JPetScin(void);
   JPetScin(int p_id,
 	   bool p_isActive,
@@ -71,7 +74,22 @@ public:
   JPetUser getUser() const { return fUser; }
   
   std::pair<TRef, TRef> getTRefPMs() const { return fTRefPMs; }
+  void setTRefPMs(JPetPM &p_leftPM, JPetPM &p_rightPM)
+  {
+    fTRefPMs.first = &p_leftPM;
+    fTRefPMs.second = &p_rightPM;
+  }
+  void setLeftTRefPM(JPetPM &p_PM)
+  {
+    fTRefPMs.first = &p_PM;
+  }
+  void setRightTRefPM(JPetPM &p_PM)
+  {
+    fTRefPMs.second = &p_PM;
+  }
 
+  friend class JPetParamManager;
+  
 protected:
   int fId;
   bool fIsActive;
@@ -84,6 +102,12 @@ protected:
   
   std::pair<TRef, TRef> fTRefPMs;
   
+  void clearTRefPMs()
+  {
+    fTRefPMs.first = NULL;
+    fTRefPMs.second = NULL;
+  }
+  
   ClassDef(JPetScin, 1);
 };
 
diff --git a/framework/JPetScin/JPetScin.h~ b/framework/JPetScin/JPetScin.h~
index 8b8428e..738ae1c 100644
--- a/framework/JPetScin/JPetScin.h~
+++ b/framework/JPetScin/JPetScin.h~
@@ -3,8 +3,10 @@
 #define _JPETSCIN_H_
 
 #include "TNamed.h"
-//#include <TRef.h>
+#include <TRef.h>
 #include "../JPetUser/JPetUser.h"
+#include "../JPetPM/JPetPM.h"
+//#include "../JPetParamManager/JPetParamManager.h"
 
 
 class JPetScin: public TNamed
@@ -71,7 +73,22 @@ public:
   JPetUser getUser() const { return fUser; }
   
   std::pair<TRef, TRef> getTRefPMs() const { return fTRefPMs; }
+  void setTRefPMs(JPetPM &p_leftPM, JPetPM &p_rightPM)
+  {
+    fTRefPMs.first = &p_leftPM;
+    fTRefPMs.second = &p_rightPM;
+  }
+  void setLeftTRefPM(JPetPM &p_PM)
+  {
+    fTRefPMs.first = &p_PM;
+  }
+  void setRightTRefPM(JPetPM &p_PM)
+  {
+    fTRefPMs.second = &p_PM;
+  }
 
+  friend class JPetParamManager;
+  
 protected:
   int fId;
   bool fIsActive;
@@ -84,6 +101,12 @@ protected:
   
   std::pair<TRef, TRef> fTRefPMs;
   
+  void clearTRefPMs()
+  {
+    fTRefPMs.first = NULL;
+    fTRefPMs.second = NULL;
+  }
+  
   ClassDef(JPetScin, 1);
 };
 
diff --git a/framework/JPetTRB/JPetTRB.cpp b/framework/JPetTRB/JPetTRB.cpp
index d358b0e..2252e68 100644
--- a/framework/JPetTRB/JPetTRB.cpp
+++ b/framework/JPetTRB/JPetTRB.cpp
@@ -4,6 +4,48 @@
 
 ClassImp(JPetTRB);
 
+JPetTRB::JPetTRBChannel::JPetTRBChannel(int p_id, 
+				       bool p_isActive, 
+				       std::string p_status, 
+				       int p_portNumber, 
+				       std::string p_description) :
+								    fId(p_id),
+								    fIsActive(p_isActive),
+								    fStatus(p_status),
+								    fPortNumber(p_portNumber),
+								    fDescription(p_description)
+{}
+
+JPetTRB::JPetTRBInput::JPetTRBInput(int p_id, 
+				     bool p_isActive, 
+				     std::string p_status, 
+				     int p_portNumber, 
+				     std::string p_description, 
+				     int p_TRBId) :
+						    JPetTRBChannel(p_id, 
+								   p_isActive,
+								   p_status, 
+								   p_portNumber, 
+								   p_description),
+						    fTRBId(p_TRBId)
+{}
+
+JPetTRB::JPetTRBOutput::JPetTRBOutput(int p_id, 
+				       bool p_isActive, 
+				       std::string p_status, 
+				       int p_portNumber, 
+				       std::string p_description, 
+				       int p_TRBId,
+				       int p_TRBInputId) : 
+						    JPetTRBChannel(p_id, 
+								   p_isActive,
+								   p_status, 
+								   p_portNumber, 
+								   p_description),
+						    fTRBId(p_TRBId),
+						    fTRBInputId(p_TRBInputId)
+{}
+
 JPetTRB::JPetTRB() : 
 		    fId(0),
 		    fIsActive(false),
diff --git a/framework/JPetTRB/JPetTRB.cpp~ b/framework/JPetTRB/JPetTRB.cpp~
index 7a5efd7..a97d31d 100644
--- a/framework/JPetTRB/JPetTRB.cpp~
+++ b/framework/JPetTRB/JPetTRB.cpp~
@@ -1,8 +1,51 @@
+// JPetTRB.cpp - TRB
 #include "JPetTRB.h"
 
 
 ClassImp(JPetTRB);
 
+JPetTRB::JPetTRBChannel::JPetTRBChannel(int p_id, 
+				       bool p_isActive, 
+				       std::string p_status, 
+				       int p_portNumber, 
+				       std::string p_description) :
+								    fId(p_id),
+								    fIsActive(p_isActive),
+								    fStatus(p_status),
+								    fPortNumber(p_portNumber),
+								    fDescription(p_description)
+{}
+
+JPetTRB::JPetTRBInput::JPetTRBInput(int p_id, 
+				     bool p_isActive, 
+				     std::string p_status, 
+				     int p_portNumber, 
+				     std::string p_description, 
+				     int p_TRBId) :
+						    JPetTRBChannel(p_id, 
+								  p_isActive,
+								  p_status, 
+								  p_portNumber, 
+								  p_description),
+						    fTRBId(p_TRBId)
+{}
+
+JPetTRB::JPetTRBOutput::JPetTRBOutput(int p_id, 
+				       bool p_isActive, 
+				       std::string p_status, 
+				       int p_portNumber, 
+				       std::string p_description, 
+				       int p_TRBId,
+				       int p_TRBInputId) : 
+						    JPetTRBChannel(p_id, 
+								  p_isActive,
+								  p_status, 
+								  p_portNumber, 
+								  p_description),
+						    fTRBId(p_TRBId),
+						    fTRBInputId(p_TRBInputId)
+{}
+
 JPetTRB::JPetTRB() : 
 		    fId(0),
 		    fIsActive(false),
@@ -19,14 +62,16 @@ JPetTRB::JPetTRB(int p_id,
 		 int p_maxch, 
 		 std::string p_name, 
 		 std::string p_description, 
-		 int p_version) :
-				  fId(p_id),
-				  fIsActive(p_isActive),
-				  fStatus(p_status),
-				  fMaxch(p_maxch),
-				  fName(p_name),
-				  fDescription(p_description),
-				  fVersion(p_version)
+		 int p_version,
+		 const JPetUser &p_user) :
+					  fId(p_id),
+					  fIsActive(p_isActive),
+					  fStatus(p_status),
+					  fMaxch(p_maxch),
+					  fName(p_name),
+					  fDescription(p_description),
+					  fVersion(p_version),
+					  fUser(p_user)
 {}
 
 JPetTRB::~JPetTRB()
diff --git a/framework/JPetTRB/JPetTRB.h b/framework/JPetTRB/JPetTRB.h
index 9e73797..5608a17 100644
--- a/framework/JPetTRB/JPetTRB.h
+++ b/framework/JPetTRB/JPetTRB.h
@@ -5,10 +5,53 @@
 #include "TNamed.h"
 #include <TRef.h>
 #include "../JPetUser/JPetUser.h"
+#include "../JPetTOMB/JPetTOMB.h"
 
 
 class JPetTRB: public TNamed
 {
+protected:
+  struct JPetTRBChannel
+  {
+    JPetTRBChannel(int p_id, 
+		  bool p_isActive, 
+		  std::string p_status, 
+		  int p_portNumber, 
+		  std::string p_description);
+    
+    int fId;
+    bool fIsActive;
+    std::string fStatus;
+    int fPortNumber;
+    std::string fDescription;
+  };
+  
+  struct JPetTRBInput : public JPetTRBChannel
+  {
+    JPetTRBInput(int p_id, 
+		 bool p_isActive, 
+		 std::string p_status, 
+		 int p_portNumber, 
+		 std::string p_description, 
+		 int p_TRBId);
+    
+    int fTRBId;
+  };
+
+  struct JPetTRBOutput : public JPetTRBChannel
+  {
+    JPetTRBOutput(int p_id, 
+		  bool p_isActive, 
+		  std::string p_status, 
+		  int p_portNumber, 
+		  std::string p_description, 
+		  int p_TRBId,
+		  int p_TRBInputId);
+    
+    int fTRBId;
+    int fTRBInputId;
+  };
+  
 public:
   JPetTRB(void);
   JPetTRB(int p_id, bool p_isActive, std::string p_status, int p_maxch, std::string p_name, std::string p_description, int p_version, const JPetUser &p_user);
@@ -24,6 +67,12 @@ public:
   JPetUser getUser() const { return fUser; }
   
   TRef getTRefTOMB() const { return fTRefTOMB; }
+  void setTRefTOMB(JPetTOMB &p_TOMB)
+  {
+    fTRefTOMB = &p_TOMB;
+  }
+  
+  friend class JPetParamManager;
   
 protected:
   int fId;
@@ -37,6 +86,11 @@ protected:
   
   TRef fTRefTOMB;
   
+  void clearTRefTOMB()
+  {
+    fTRefTOMB = NULL;
+  }
+  
   ClassDef(JPetTRB, 1);
 };
 
diff --git a/framework/JPetTRB/JPetTRB.h~ b/framework/JPetTRB/JPetTRB.h~
index 1f1321b..57e439c 100644
--- a/framework/JPetTRB/JPetTRB.h~
+++ b/framework/JPetTRB/JPetTRB.h~
@@ -3,11 +3,55 @@
 #define _JPETTRB_H_
 
 #include "TNamed.h"
+#include <TRef.h>
 #include "../JPetUser/JPetUser.h"
+#include "../JPetTOMB/#include "../JPet.h"
 
 
 class JPetTRB: public TNamed
 {
+protected:
+  struct JPetTRBChannel
+  {
+    JPetTRBChannel(int p_id, 
+		  bool p_isActive, 
+		  std::string p_status, 
+		  int p_portNumber, 
+		  std::string p_description);
+    
+    int fId;
+    bool fIsActive;
+    std::string fStatus;
+    int fPortNumber;
+    std::string fDescription;
+  };
+  
+  struct JPetTRBInput : public JPetTRBChannel
+  {
+    JPetTRBInput(int p_id, 
+		 bool p_isActive, 
+		 std::string p_status, 
+		 int p_portNumber, 
+		 std::string p_description, 
+		 int p_TRBId);
+    
+    int fTRBId;
+  };
+
+  struct JPetTRBOutput : public JPetTRBChannel
+  {
+    JPetTRBOutput(int p_id, 
+		  bool p_isActive, 
+		  std::string p_status, 
+		  int p_portNumber, 
+		  std::string p_description, 
+		  int p_TRBId,
+		  int p_TRBInputId);
+    
+    int fTRBId;
+    int fTRBInputId;
+  };
+  
 public:
   JPetTRB(void);
   JPetTRB(int p_id, bool p_isActive, std::string p_status, int p_maxch, std::string p_name, std::string p_description, int p_version, const JPetUser &p_user);
@@ -22,6 +66,14 @@ public:
   int getVersion() const { return fVersion; }
   JPetUser getUser() const { return fUser; }
   
+  TRef getTRefTOMB() const { return fTRefTOMB; }
+  void setTRefTOMB(JPetTOMB &p_TOMB)
+  {
+    fTRefTOMB = &p_TOMB;
+  }
+  
+  friend class JPetParamManager;
+  
 protected:
   int fId;
   bool fIsActive;
@@ -32,6 +84,13 @@ protected:
   int fVersion;
   JPetUser fUser;
   
+  TRef fTRefTOMB;
+  
+  void clearTRefTOMB()
+  {
+    fTRefTOMB = NULL;
+  }
+  
   ClassDef(JPetTRB, 1);
 };
 
