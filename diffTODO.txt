diff --git a/framework/JPetHLDReader/JPetHLDReader.cpp b/framework/JPetHLDReader/JPetHLDReader.cpp
index e2048d7..00b1a99 100644
--- a/framework/JPetHLDReader/JPetHLDReader.cpp
+++ b/framework/JPetHLDReader/JPetHLDReader.cpp
@@ -47,7 +47,7 @@ bool JPetHLDReader::OpenFile (const char* filename)
 
 void JPetHLDReader::ReadData ()
 {
-  fTree = static_cast<TTree*>(fFile.Get("T")); /// @todo add some comment
+  fTree = static_cast<TTree*>(fFile.Get("T"));
   assert(fTree);
   fBranch = fTree->GetBranch("event");
   assert(fBranch);
diff --git a/framework/JPetManager/JPetManager.cpp b/framework/JPetManager/JPetManager.cpp
index 84bd9cf..4dcb527 100644
--- a/framework/JPetManager/JPetManager.cpp
+++ b/framework/JPetManager/JPetManager.cpp
@@ -31,7 +31,7 @@ void JPetManager::AddTask(JPetAnalysisModule* mod)
 
 void JPetManager::Run()
 {
-  UnpackFile(); /// @todo some more clever way :P
+  UnpackFile();
   JPetWriter* currentWriter = 0;
   std::vector<JPetAnalysisModule*>::iterator taskIter;
   // pseudo-input container
diff --git a/framework/JPetSigCh/JPetSigCh.cpp b/framework/JPetSigCh/JPetSigCh.cpp
index b53c0bb..942cf9a 100644
--- a/framework/JPetSigCh/JPetSigCh.cpp
+++ b/framework/JPetSigCh/JPetSigCh.cpp
@@ -12,7 +12,6 @@ void JPetSigCh::init()
   fIsComplete = false;
 }
 
-/// @todo what to do with those pointers, that is a horrible leak now
 JPetSigCh::JPetSigCh(const JPetSigCh& obj)
 {
   init();
@@ -41,12 +40,6 @@ JPetSigCh::JPetSigCh(float edge_time, float fall_edge_time)
   addCh(edge_time, fall_edge_time);
 }
 
-/// @todo add some destructor
-//JPetSigCh::~JPetSigCh() 
-//{
-//
-//}
-
 float JPetSigCh::getTime(EdgeType type) const {
   assert ((type == kRising) || (type == kFalling));
   if (type == kRising) return fChannels.first;
diff --git a/framework/JPetSignal/JPetSignal.h b/framework/JPetSignal/JPetSignal.h
index bc9a858..321ab6c 100644
--- a/framework/JPetSignal/JPetSignal.h
+++ b/framework/JPetSignal/JPetSignal.h
@@ -13,7 +13,7 @@
 #include <cassert>
 #include <vector>
 
-/// @todo structure mimics the structure History described in the  PET UJ Report 19 ->table 39 (p.18)
+/// structure mimics the structure History described in the  PET UJ Report 19 ->table 39 (p.18)
 struct History: public TObject {
  public:
   History(int hld = 0, int tslot = 0, int channel = 0, int daq = 0) :
@@ -30,7 +30,6 @@ struct History: public TObject {
 };
 
 
-/// @todo structure mimics the structure described in the  PET UJ Report 19 ->table 39 (p.18) which is then put into the array trh[2][nTrh]. Personally I dont like it :P
 struct ExtendedThreshold {
   ExtendedThreshold() :
   fThreshold(0),
diff --git a/framework/JPetWriter/JPetWriter.h b/framework/JPetWriter/JPetWriter.h
index af40733..7123a92 100644
--- a/framework/JPetWriter/JPetWriter.h
+++ b/framework/JPetWriter/JPetWriter.h
@@ -7,6 +7,7 @@
 #include <TFile.h>
 #include <TNamed.h>
 #include <TTree.h>
+#include <boost/noncopyable.hpp>
 #include "../../JPetLoggerInclude.h"
 
  #include "../JPetBarrelSlot/JPetBarrelSlot.h"
@@ -20,17 +21,13 @@
  #include "../JPetTSlot/JPetTSlot.h"
 
 
-/// @todo what about the copy constructor and the asignment operator
 
-class JPetWriter {
+class JPetWriter : private boost::noncopyable {
 public:
     JPetWriter(const char* file_name);
     virtual ~JPetWriter();
     template <class T>
     bool Write(const T& obj);
-    /**
-     * @todo Argument prbably should be const, but root method TTree::Branch() used in it is not. How to solve it?
-     */
     template <class T>
     bool Write(std::vector<T>& obj);
     //bool OpenFile(const char* filename);
