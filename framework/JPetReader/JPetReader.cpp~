// JPetReader.cpp - Reader
#include "JPetReader.h"
#include <cassert>
#include <iostream>
#include "../JPetUserInfoStructure/JPetUserInfoStructure.h"


JPetReader::JPetReader() : 
			  fBranch(0), 
			  fObject(0), 
			  fTree(0), 
			  fFile(NULL)
{}

JPetReader::JPetReader(const char* p_filename) : 
						fBranch(0), 
						fObject(0), 
						fTree(0), 
						fFile(NULL),
						fTFile(p_filename, "READ")
{
  /*if(OpenFile(p_filename))
  {
    ReadData("");
  }*/
}

JPetReader::~JPetReader()
{
  CloseFile();
  closeTFile();
}

void JPetReader::CloseFile () {
  if (fFile != NULL) {
    if (fFile->IsOpen()) fFile->Close();
    delete fFile;
    fFile = NULL;
  }
  fBranch = 0;
  fObject = 0;
  fTree = 0;
}


bool JPetReader::OpenFile (const char* filename) {
  CloseFile();
  
  fFile = new TFile(filename);
  //fFile.OpenFile(filename);

  if ((!fFile->IsOpen())||fFile->IsZombie()) {
    ERROR("Cannot open file.");
    CloseFile();
    return false;
  }
  return true;
}

/* tu też bym zwrócił boola i wyszczególnił przypadek,
 * gdy nie ma obiektu o danej nazwie w pliku - Karol
 */
void JPetReader::ReadData (const char* objname) {
  std::cout << "Andrzej ReadData() 1" << std::endl;
  assert(objname);
  std::cout << "Andrzej ReadData() 2" << std::endl;
  //if (objname[0]== 0) { ///@warning nie rozumiem tego warunku
  //  ERROR("No object name specified");
  //  return;
  //}
  std::cout << "Andrzej ReadData() 3" << std::endl;
  fTree = static_cast<TTree*>(fFile->Get(objname));
  assert(fTree);
  std::cout << "Andrzej ReadData() 4" << std::endl;
  TObjArray* arr = fTree->GetListOfBranches();
  fBranch = (TBranch*)(arr->At(0));
  //fBranch = fTree->GetBranch(objname);
  assert(fBranch);
  fBranch->SetAddress(&fObject);
  std::cout << "Andrzej ReadData() 5" << std::endl;
}

TObject* JPetReader::GetHeader(){
    // @todo The same as in writer. At() should take an enum that keeps positions of different things.
    return fTree->GetUserInfo()->At(JPetUserInfoStructure::kHeader);
}

void JPetReader::closeTFile()
{
  if(fTFile.IsOpen())
  {
    fTFile.cd();
    fTFile.Close();
  }
}
